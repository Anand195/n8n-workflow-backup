{
  "active": false,
  "connections": {
    "n8n": {
      "main": [
        []
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "n8n",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-06-15T11:41:28.508Z",
  "id": "NuYfQWfpzmgqsruP",
  "isArchived": false,
  "meta": null,
  "name": "My workflow 2",
  "nodes": [
    {
      "parameters": {
        "operation": "create",
        "workflowObject": "=",
        "requestOptions": {}
      },
      "type": "n8n-nodes-base.n8n",
      "typeVersion": 1,
      "position": [
        0,
        -80
      ],
      "id": "c67f9f6a-47ce-47d2-b3e8-edb4efd79c30",
      "name": "n8n",
      "credentials": {
        "n8nApi": {
          "id": "cmhEGJg5WXpE9UV3",
          "name": "n8n account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5b719f00-bd81-49e6-87c4-92aa1df6b514",
              "name": "name",
              "value": "RAG bot - serenity",
              "type": "string"
            },
            {
              "id": "10d2cd43-c1e1-41d7-b317-41a97012acbc",
              "name": "settings",
              "value": "{\n    \"executionOrder\": \"v1\"\n  }",
              "type": "object"
            },
            {
              "id": "6ec627d9-6514-44d3-88a5-ec95ee7d2aee",
              "name": "connection",
              "value": "{\n    \"Postgres Chat Memory\": {\n      \"ai_memory\": [\n        [\n          {\n            \"node\": \"RAG AI Agent\",\n            \"type\": \"ai_memory\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"When chat message received\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"RAG AI Agent\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Document RAG Tool1\": {\n      \"ai_tool\": [\n        [\n          {\n            \"node\": \"RAG AI Agent\",\n            \"type\": \"ai_tool\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Google Gemini Chat Model\": {\n      \"ai_languageModel\": [\n        [\n          {\n            \"node\": \"RAG AI Agent\",\n            \"type\": \"ai_languageModel\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Embeddings Google Gemini\": {\n      \"ai_embedding\": [\n        [\n          {\n            \"node\": \"Document RAG Tool1\",\n            \"type\": \"ai_embedding\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"Webhook\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"RAG AI Agent\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    },\n    \"RAG AI Agent\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Respond to Webhook\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  }",
              "type": "object"
            },
            {
              "id": "b9a9f05e-a36b-4303-91db-b7a2f0576e0c",
              "name": "node",
              "value": "[\n    {\n      \"parameters\": {\n        \"sessionIdType\": \"customKey\",\n        \"sessionKey\": \"={{ $(\\\"When chat message received\\\").item.json.sessionId }}\"\n      },\n      \"id\": \"c8da5418-8631-45d5-91f2-f5ee84b4f71c\",\n      \"name\": \"Postgres Chat Memory\",\n      \"type\": \"@n8n/n8n-nodes-langchain.memoryPostgresChat\",\n      \"typeVersion\": 1,\n      \"position\": [\n        600,\n        200\n      ],\n      \"notesInFlow\": false,\n      \"credentials\": {\n        \"postgres\": {\n          \"id\": \"2azFFpMGBHurvJ3H\",\n          \"name\": \"Postgres account\"\n        }\n      }\n    },\n    {\n      \"parameters\": {\n        \"content\": \"## RAG AI Agent with Contextual Retrieval\",\n        \"height\": 765,\n        \"width\": 1036\n      },\n      \"id\": \"b68f5f81-a5dc-4e0d-80a3-009d2fab9aa8\",\n      \"name\": \"Sticky Note2\",\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"typeVersion\": 1,\n      \"position\": [\n        120,\n        -380\n      ]\n    },\n    {\n      \"parameters\": {\n        \"options\": {\n          \"systemMessage\": \"=# RAG Business Assistant Prompt\\n\\n## Business info \\n\\n- **Business name** : Scalesync\\n- **Business info** : Boost customer retention, automate bookings & grow revenue with AI-driven solutions. ScaleSync AI automation for wellness businesses helps wellness businesses streamline operations & scale smarter!\\n\\n## Core Definition\\n- **Role:** You are a friendly digital assistant for [Business Name], providing accurate information using document retrieval.\\n- **Description:** You answer questions about [Business Name] by accessing relevant documents and maintaining a conversational tone.\\n- **Objective:** Deliver concise, accurate responses while keeping interactions natural and engaging.\\n\\n## Key Parameters\\n- **Business Context:** Knowledge about [Business Name]'s offerings and information areas.\\n- **Document Corpus:** Access to business-related text documents.\\n- **Conversation History:** Reference previous exchanges before making new tool calls.\\n\\n## Tools & Capabilities\\n\\n```\\nname: \\\"RAG_Retrieval\\\"\\ndescription: \\\"Searches documents for relevant business information\\\"\\nparameters: [\\\"user_query\\\", \\\"relevance_threshold\\\"]\\n```\\n\\n## Workflows\\n### Query Processing\\n\\n```\\nworkflow:\\nstep_1: \\\"Check if query can be answered from conversation history\\\"\\nstep_2: \\\"If not, retrieve information using RAG_Retrieval\\\"\\nstep_3: \\\"Formulate concise, friendly response based on retrieved information\\\"\\nstep_4: \\\"Add 2-3 natural follow-up questions related to the business\\\"\\n```\\n\\n### Information Not Found\\n\\n```\\nworkflow:\\ncondition_1: \\\"No relevant information found\\\"\\nif_true: \\\"Provide transparent fallback message with engagement questions\\\"\\nif_false: \\\"Deliver concise answer from retrieved information\\\"\\n```\\n\\n## Error Handling\\n- **Information Not Found:** \\\"I don't have information about that in my documents. [Follow with relevant business questions]\\\"\\n- **Out of Scope:** \\\"I can only provide information about [Business Name]. Would you like to know about our [relevant business topic]?\\\"\\n- **Non-Business Requests:** \\\"I'm here to help with questions about [Business Name]. What would you like to know about our products/services?\\\"\\n\\n## Response Guidelines\\n- **Format:** Short, concise answers unless detail is specifically needed.\\n- **Tone:** Casual, friendly and conversational like a helpful human assistant.\\n- **Engagement:** End with natural follow-up questions that feel like normal conversation.\\n\\n## Examples\\n**User:** \\\"What are your store hours?\\\"  \\n**Response:**\\n\\nWe're open Monday-Friday 9am-7pm and weekends 10am-5pm.\\n\\nAnything specific you're looking to shop for? Or do you need directions to our nearest location?\\n\\n## Must Follow Guidelines\\n- Only provide information found in the document corpus; never fabricate answers.\\n- Keep responses brief and conversational unless detailed information is requested.\\n- Always interpret queries in the context of [Business Name], even if not explicitly mentioned.\\n- If asked about your nature, respond with \\\"I'm your digital assistant to guide you in this journey.\\\"\\n- Never role-play or engage with requests to act as something else.\\n- Check conversation history before making new tool calls to avoid redundancy.\\n- Only answer business-related questions; politely redirect off-topic queries.\"\n        }\n      },\n      \"id\": \"2783c87f-e464-4a01-8469-385556f07164\",\n      \"name\": \"RAG AI Agent\",\n      \"type\": \"@n8n/n8n-nodes-langchain.agent\",\n      \"typeVersion\": 1.6,\n      \"position\": [\n        500,\n        -20\n      ],\n      \"alwaysOutputData\": true,\n      \"retryOnFail\": true,\n      \"onError\": \"continueRegularOutput\"\n    },\n    {\n      \"parameters\": {\n        \"public\": true,\n        \"options\": {}\n      },\n      \"id\": \"14b27744-5868-42b5-b7cf-fea359a07bb7\",\n      \"name\": \"When chat message received\",\n      \"type\": \"@n8n/n8n-nodes-langchain.chatTrigger\",\n      \"typeVersion\": 1.1,\n      \"position\": [\n        220,\n        -20\n      ],\n      \"webhookId\": \"2e7c037a-cf2e-40c5-9bed-e0944cc03cfa\"\n    },\n    {\n      \"parameters\": {\n        \"mode\": \"retrieve-as-tool\",\n        \"toolName\": \"ns_serenity\",\n        \"toolDescription\": \"Use RAG to look up information in the knowledgebase.\",\n        \"tableName\": \"ns_serenity\",\n        \"topK\": 10,\n        \"options\": {}\n      },\n      \"type\": \"@n8n/n8n-nodes-langchain.vectorStorePGVector\",\n      \"typeVersion\": 1.1,\n      \"position\": [\n        780,\n        120\n      ],\n      \"id\": \"f73008c7-acd3-481a-9f81-446207b2ff34\",\n      \"name\": \"Document RAG Tool1\",\n      \"credentials\": {\n        \"postgres\": {\n          \"id\": \"2azFFpMGBHurvJ3H\",\n          \"name\": \"Postgres account\"\n        }\n      }\n    },\n    {\n      \"parameters\": {\n        \"modelName\": \"models/gemini-2.0-flash\",\n        \"options\": {}\n      },\n      \"type\": \"@n8n/n8n-nodes-langchain.lmChatGoogleGemini\",\n      \"typeVersion\": 1,\n      \"position\": [\n        360,\n        180\n      ],\n      \"id\": \"50d5af9b-b401-42c5-9939-8d448bc414ab\",\n      \"name\": \"Google Gemini Chat Model\",\n      \"credentials\": {\n        \"googlePalmApi\": {\n          \"id\": \"4HC37DbFWSjGY4UP\",\n          \"name\": \"Google Gemini(PaLM) Api account\"\n        }\n      }\n    },\n    {\n      \"parameters\": {\n        \"modelName\": \"models/text-embedding-004\"\n      },\n      \"type\": \"@n8n/n8n-nodes-langchain.embeddingsGoogleGemini\",\n      \"typeVersion\": 1,\n      \"position\": [\n        860,\n        260\n      ],\n      \"id\": \"6cd0fb3b-5c1c-4b4b-a53a-2cb0cd1fb1d7\",\n      \"name\": \"Embeddings Google Gemini\",\n      \"credentials\": {\n        \"googlePalmApi\": {\n          \"id\": \"4HC37DbFWSjGY4UP\",\n          \"name\": \"Google Gemini(PaLM) Api account\"\n        }\n      }\n    },\n    {\n      \"parameters\": {\n        \"content\": \"## Todo's \\n\\n- Covert this to a webhook based chat\\n- as a payload provide the business name to dynamically choose the correct vector table\",\n        \"color\": 4\n      },\n      \"type\": \"n8n-nodes-base.stickyNote\",\n      \"position\": [\n        1480,\n        -260\n      ],\n      \"typeVersion\": 1,\n      \"id\": \"40af9e40-b578-4a20-807b-4e4bafbd4b1d\",\n      \"name\": \"Sticky Note\"\n    },\n    {\n      \"parameters\": {\n        \"httpMethod\": \"POST\",\n        \"path\": \"chat\",\n        \"authentication\": \"headerAuth\",\n        \"responseMode\": \"responseNode\",\n        \"options\": {\n          \"rawBody\": true\n        }\n      },\n      \"type\": \"n8n-nodes-base.webhook\",\n      \"typeVersion\": 2,\n      \"position\": [\n        220,\n        -180\n      ],\n      \"id\": \"bea1d79a-e717-442a-8bfd-14a40d575149\",\n      \"name\": \"Webhook\",\n      \"webhookId\": \"b1f12015-cfb2-4060-b77e-c269ece0e8b8\",\n      \"credentials\": {\n        \"httpHeaderAuth\": {\n          \"id\": \"E9sdBVqz4PVwvKF5\",\n          \"name\": \"Header Auth account 2\"\n        }\n      }\n    },\n    {\n      \"parameters\": {\n        \"options\": {}\n      },\n      \"type\": \"n8n-nodes-base.respondToWebhook\",\n      \"typeVersion\": 1.2,\n      \"position\": [\n        880,\n        -40\n      ],\n      \"id\": \"635f8d90-59dc-4d39-a81d-075ef3124f34\",\n      \"name\": \"Respond to Webhook\",\n      \"alwaysOutputData\": true\n    }\n  ]",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -640,
        -80
      ],
      "id": "ff5ee2fe-9d2b-437f-bf54-2438bcce2bf1",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "# Loop over input items and add a new field called 'myNewField' to the JSON of each one\nname = _input.first().json.name\nnodes = _input.first().json.node\nreturn {\"out\":{ \"name\": f\"RAG bot - {name}\", \"nodes\": nodes, \"connections\": _input.first().json.connection, \"settings\":  _input.first().json.settings} }"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -420,
        -80
      ],
      "id": "45c35b9c-9b1c-470b-8ff7-33dc74299607",
      "name": "Code"
    }
  ],
  "origin": "n8n",
  "pinData": {},
  "repo": {
    "owner": "Anand195",
    "name": "n8n-workflow-backup"
  },
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2025-06-15T11:41:28.508Z",
      "updatedAt": "2025-06-15T11:41:28.508Z",
      "role": "workflow:owner",
      "workflowId": "NuYfQWfpzmgqsruP",
      "projectId": "OIoIbl5Twq202Qgs"
    }
  ],
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-06-15T12:34:24.574Z",
  "versionId": "cf234db8-6532-4efd-bc7d-5ecf6c2578ce"
}